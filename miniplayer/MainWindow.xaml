<ctrl:BaseWindow x:Class="miniplayer.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:ctrl="clr-namespace:miniplayer.ui.controls"
        xmlns:cvt="clr-namespace:miniplayer.ui.converters"
        xmlns:ui="clr-namespace:miniplayer.ui"
        xmlns:lib="clr-namespace:miniplayer.lib;assembly=miniplayer.lib"
        xmlns:s="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        SizeToContent="Height"
        Title="MainWindow" Height="80" Width="400"
        BorderThickness="1"
        MinWidth="{Binding UiScale, Mode=OneWay, Source={x:Static lib:Settings.Instance},Converter={StaticResource MultiplyDoublesConverter}, ConverterParameter={StaticResource 1xMinWidth}}"
        ui:WindowPosition.Save="WindowPosition"
        TextBlock.Foreground="{DynamicResource TextForegroundBrush}"
        Topmost="{Binding AlwaysOnTop, Mode=OneWay, Source={x:Static lib:Settings.Instance}}"
        ShowInTaskbar="{Binding TaskbarVisible, Mode=OneWay, Source={x:Static lib:Settings.Instance}}">
    <Window.Resources>
        <cvt:BoolToVisibilityConverter x:Key="uiConverter" TrueVisibility="Hidden" FalseVisibility="Visible"/>
        <cvt:BoolToVisibilityConverter x:Key="signinConverter" TrueVisibility="Visible" FalseVisibility="Collapsed"/>
        <cvt:BoolToVisibilityConverter x:Key="hideShowConverter" TrueVisibility="Visible" FalseVisibility="Collapsed"/>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static ui:PlayerCommands.SignIn}" Executed="PlayerCommand_Executed"/>
        <CommandBinding Command="{x:Static ui:PlayerCommands.Shuffle}" Executed="PlayerCommand_Executed"/>
        <CommandBinding Command="{x:Static ui:PlayerCommands.SkipPrev}" Executed="PlayerCommand_Executed"/>
        <CommandBinding Command="{x:Static ui:PlayerCommands.PlayPause}" Executed="PlayerCommand_Executed"/>
        <CommandBinding Command="{x:Static ui:PlayerCommands.SkipNext}" Executed="PlayerCommand_Executed"/>
        <CommandBinding Command="{x:Static ui:PlayerCommands.Repeat}" Executed="PlayerCommand_Executed"/>
        <CommandBinding Command="{x:Static ui:PlayerCommands.Favorite}" Executed="PlayerCommand_Executed"/>
        <CommandBinding Command="{x:Static ui:PlayerCommands.OpenInSpotify}" Executed="OpenInSpotify_Executed"/>
    </Window.CommandBindings>
    <Window.ContextMenu>
        <ContextMenu x:Name="_menu" Style="{StaticResource MP_ContextMenuStyle}">
            <ContextMenu.Resources>
                <cvt:IsEqualConverter x:Key="IsEqualConverter"/>
                <s:Boolean x:Key="False">False</s:Boolean>
                <s:Double x:Key="scale100">1.0</s:Double>
                <s:Double x:Key="scale125">1.25</s:Double>
                <s:Double x:Key="scale150">1.5</s:Double>
                <s:Double x:Key="scale200">2.0</s:Double>
            </ContextMenu.Resources>
            <ContextMenu.CommandBindings>
                <CommandBinding Command="{x:Static ui:SettingsCommands.ChangeTheme}" Executed="SettingsCommand_Executed"/>
                <CommandBinding Command="{x:Static ui:SettingsCommands.ToggleAlwaysOnTop}" Executed="SettingsCommand_Executed"/>
                <CommandBinding Command="{x:Static ui:SettingsCommands.HideShowControls}" Executed="SettingsCommand_Executed"/>
                <CommandBinding Command="{x:Static ui:SettingsCommands.HideShowProgress}" Executed="SettingsCommand_Executed"/>
                <CommandBinding Command="{x:Static ui:SettingsCommands.HideShowTaskbar}" Executed="SettingsCommand_Executed"/>
                <CommandBinding Command="{x:Static ui:SettingsCommands.SignOut}" Executed="SettingsCommand_Executed"/>
                <CommandBinding Command="{x:Static ui:SettingsCommands.ChangeZoom}" Executed="SettingsCommand_Executed"/>
            </ContextMenu.CommandBindings>
            <MenuItem Header="Settings">
                <MenuItem Header="Always On Top" 
                          Command="{x:Static ui:SettingsCommands.ToggleAlwaysOnTop}" 
                          IsChecked="{Binding AlwaysOnTop, Source={x:Static lib:Settings.Instance}, Mode=OneWay}"/>
                <MenuItem Header="Zoom">
                    <MenuItem Header="100%"
                              IsChecked="{Binding UiScale, Source={x:Static lib:Settings.Instance}, Mode=OneWay, Converter={StaticResource IsEqualConverter}, ConverterParameter={StaticResource scale100}}"
                              Command="{x:Static ui:SettingsCommands.ChangeZoom}"
                              CommandParameter="{StaticResource scale100}"/>
                    <MenuItem Header="125%"
                              IsChecked="{Binding UiScale, Source={x:Static lib:Settings.Instance}, Mode=OneWay, Converter={StaticResource IsEqualConverter}, ConverterParameter={StaticResource scale125}}"
                              Command="{x:Static ui:SettingsCommands.ChangeZoom}"
                              CommandParameter="{StaticResource scale125}"/>
                    <MenuItem Header="150%"
                              IsChecked="{Binding UiScale, Source={x:Static lib:Settings.Instance}, Mode=OneWay, Converter={StaticResource IsEqualConverter}, ConverterParameter={StaticResource scale150}}"
                              Command="{x:Static ui:SettingsCommands.ChangeZoom}"
                              CommandParameter="{StaticResource scale150}"/>
                    <MenuItem Header="200%"
                              IsChecked="{Binding UiScale, Source={x:Static lib:Settings.Instance}, Mode=OneWay, Converter={StaticResource IsEqualConverter}, ConverterParameter={StaticResource scale200}}"
                              Command="{x:Static ui:SettingsCommands.ChangeZoom}"
                              CommandParameter="{StaticResource scale200}"/>
                </MenuItem>
                <MenuItem Header="Show or Hide">
                    <MenuItem Header="Controls" 
                          Command="{x:Static ui:SettingsCommands.HideShowControls}" 
                          IsChecked="{Binding ControlsVisible, Source={x:Static lib:Settings.Instance}, Mode=OneWay}"/>
                    <MenuItem Header="Progress" 
                          Command="{x:Static ui:SettingsCommands.HideShowProgress}" 
                          IsChecked="{Binding ProgressVisible, Source={x:Static lib:Settings.Instance}, Mode=OneWay}"/>
                    <MenuItem Header="Taskbar" 
                          Command="{x:Static ui:SettingsCommands.HideShowTaskbar}" 
                          IsChecked="{Binding TaskbarVisible, Source={x:Static lib:Settings.Instance}, Mode=OneWay}"/>
                </MenuItem>
                <MenuItem Header="Themes">
                    <MenuItem Header="Light" 
                              Command="{x:Static ui:SettingsCommands.ChangeTheme}" 
                              CommandParameter="light"
                              IsChecked="{Binding Theme, Source={x:Static lib:Settings.Instance}, Mode=OneWay, Converter={StaticResource IsEqualConverter}, ConverterParameter=light}"/>
                    <MenuItem Header="Dark" 
                              Command="{x:Static ui:SettingsCommands.ChangeTheme}" 
                              CommandParameter="dark"
                              IsChecked="{Binding Theme, Source={x:Static lib:Settings.Instance}, Mode=OneWay, Converter={StaticResource IsEqualConverter}, ConverterParameter=dark}"/>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="Account">
                <MenuItem Header="Sign Out" 
                          IsEnabled="{Binding NeedToken, Converter={StaticResource IsEqualConverter}, ConverterParameter={StaticResource False}}"
                          Command="{x:Static ui:SettingsCommands.SignOut}"/>
            </MenuItem>
        </ContextMenu>
    </Window.ContextMenu>
    <Grid>
        <Grid.LayoutTransform>
            <ScaleTransform 
                ScaleX="{Binding UiScale, Mode=OneWay, Source={x:Static lib:Settings.Instance}}" 
                ScaleY="{Binding UiScale, Mode=OneWay, Source={x:Static lib:Settings.Instance}}"/>
        </Grid.LayoutTransform>
        <ctrl:SignIn Grid.Column="1" 
                     Visibility="{Binding NeedToken, Converter={StaticResource signinConverter}, FallbackValue=Collapsed}"/>

        <Grid x:Name="ui_grid" Grid.Column="1" 
              Visibility="{Binding NeedToken, Converter={StaticResource uiConverter}, FallbackValue=Hidden}">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>

                <ctrl:PlayerTrackDetails Grid.Column="0" Margin="2"/>
                <ctrl:PlayerControls Grid.Column="1" HorizontalAlignment="Center" Margin="0,0,24,0" 
                                     Visibility="{Binding ControlsVisible, Source={x:Static lib:Settings.Instance}, Converter={StaticResource hideShowConverter}}"/>
            </Grid>
            <ctrl:PlayerProgressBar Grid.Row="1" Margin="2,0"
                                    Visibility="{Binding ProgressVisible, Source={x:Static lib:Settings.Instance}, Converter={StaticResource hideShowConverter}}"/>
        </Grid>
    </Grid>
</ctrl:BaseWindow>